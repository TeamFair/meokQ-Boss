{
    "Use Case": {
      "prefix": "uc",
      "body": [
        "// 📦 Package imports:",
        "import 'package:dartz/dartz.dart';",
        "import 'package:meokq_boss/domain/usecase/use_case.dart';",
        "",
        "class ${1:use_case_name}UseCase",
        "    implements",
        "        UseCase<${1:use_case_name}Output,",
        "            ${1:use_case_name}Input> {",
        "  @override",
        "  Future<Either<Failure, ${1:use_case_name}Output>> call(",
        "    ${1:use_case_name}Input input,",
        "  ) async {",
        "    try {",
        "      return Right(${1:use_case_name}Output());",
        "    } catch (e) {",
        "      return Left(${1:use_case_name}Failure());",
        "    }",
        "  }",
        "}",
        "",
        "class ${1:use_case_name}Input {}",
        "",
        "class ${1:use_case_name}Output {}",
        "",
        "class ${1:use_case_name}Failure implements Failure {",
        "  /// 오류에 따라 오류 문구를 다르게 띄울 수 있습니다",
        "  @override",
        "  String get message => '오류가 떴습니다';",
        "  ",
        "  /// 재시도 버튼을 눌러 다시 기능을 시도할 수 있도록 하고 싶다면 true로 설정해야 합니다.",
        "  @override",
        "  bool get isRetryable => false;",
        "}",
      ]
    },
    "Use Case For Rest API Error": {
      "prefix": "ucr",
      "body": [
        "import 'package:dartz/dartz.dart';",
        "import 'package:dio/dio.dart';",
        "import 'package:get/get.dart';",
        "import 'package:seoltab/app/core/utils/log/log.dart';",
        "import 'package:seoltab/domain/use_case/unknown_error_failure.dart';",
        "import 'package:seoltab/domain/use_case/use_case.dart';",
        "",
        "class ${1:use_case_name}UseCase",
        "    with RestErrorHandleMixin",
        "    implements UseCase<${1:use_case_name}Output, ${1:use_case_name}Input> {",
        "  @override",
        "  Future<Either<Failure, ${1:use_case_name}Output>> call(${1:use_case_name}Input input,) async {",
        "    try {",
        "",
        "      // [성공]",
        "      // 오류가 발생하지 않았을 시 성공했다는 뜻으로 성공한 값을 Right로 감싸서",
        "      // 리턴하면 (r){} 에서 대응할 수 있습니다.",
        "      return Right(${1:use_case_name}Output());",
        "    } on DioException catch (e) {",
        "      // [실패]",
        "      // 어떤 오류 발생 시 우리가 직접 상속해 만든 커스텀 Failure를 Left로 감싸서",
        "      // 리턴하면 (l){} 에서 대응할 수 있습니다.",
        "      //",
        "      // 네이티브 통신(Retrofit) 관련해서 통신 오류가 떴을 경우",
        "      // [DioError]로 예외처리를 하여 대응합니다.",
        "      return Left(restErrorHandle(e));",
        "    } catch (e) {",
        "      // 그 외의 오류는 이 곳에서 대응할 수 있습니다.",
        "      // ...",
        "      Log.e('\\$e');",
        "",
        "      // 아무 오류도 아닐 시 알 수 없는 오류라고 퉁칩니다.",
        "      return Left(UnknownErrorFailure());",
        "    }",
        "  }",
        "}",
        "",
        "class ${1:use_case_name}Input {${1:use_case_name}Input();}",
        "",
        "class ${1:use_case_name}Output {${1:use_case_name}Output();}",
        "",
        "/// - 커스텀 Failure : 유즈케이스에서 오류가 떴을 시 그 오류에 맞춰 대응하기 위해 우리가 직접 만드는",
        "/// Failure를 말합니다.",
        "/// - 커스텀 Failure는 Failure을 구현 또는 상속해서 만듭니다.",
        "class ${1:use_case_name}Failure implements Failure {",
        "  @override",
        "",
        "  /// 오류에 따라 오류 문구를 다르게 띄울 수 있습니다",
        "  String get message => '오류가 떴습니다'.tr;",
        "",
        "  @override",
        "",
        "  /// 재시도 버튼을 눌러 다시 기능을 시도할 수 있도록 하고 싶다면 true로 설정해야 합니다.",
        "  bool get isRetryable => false;",
        "}",
        ""
      ],
      "description": "Retrofit 통신 오류 대응용 유즈케이스 순희펫입니다"
    },
    "Use Case For Rest GraphQL Error": {
      "prefix": "ucg",
      "body": [
        "import 'package:dartz/dartz.dart';",
        "import 'package:get/get.dart';",
        "import 'package:graphql/client.dart';",
        "import 'package:seoltab/app/core/utils/log/log.dart';",
        "import 'package:seoltab/domain/usecase/unknown_error_failure.dart';",
        "import 'package:seoltab/domain/usecase/usecase.dart';",
        "",
        "class ${1:use_case_name}UseCase implements UseCase<bool, String> {",
        "  @override",
        "  Future<Either<Failure, bool>> call(String input) async {",
        "    try {",
        "",
        "      // [성공]",
        "      // 오류가 발생하지 않았을 시 성공했다는 뜻으로 성공한 값을 Right로 감싸서",
        "      // 리턴하면 (r){} 에서 대응할 수 있습니다.",
        "      return const Right(true);",
        "    } on GraphQLError catch (e) {",
        "      // [실패]",
        "      // 어떤 오류 발생 시 우리가 직접 상속해 만든 커스텀 Failure를 Left로 감싸서",
        "      // 리턴하면 (l){} 에서 대응할 수 있습니다.",
        "      //",
        "      // 나중에 GraphQLError를 직접 대응한다고 하면 여기다가 대응합니다.",
        "      //",
        "      Log.e('\\$e');",
        "",
        "      // [UnknownErrorFailure] 대신 다른 Failure로 대체할 수 있습니다.",
        "      return Left(UnknownErrorFailure());",
        "    } catch (e) {",
        "      // 그 외의 오류는 이 곳에서 대응할 수 있습니다.",
        "      // ...",
        "      Log.e('\\$e');",
        "",
        "      // 아무 오류도 아닐 시 알 수 없는 오류라고 퉁칩니다.",
        "      return Left(UnknownErrorFailure());",
        "    }",
        "  }",
        "}",
        "",
        "/// - 커스텀 Failure : 유즈케이스에서 오류가 떴을 시 그 오류에 맞춰 대응하기 위해 우리가 직접 만드는",
        "/// Failure를 말합니다.",
        "/// - 커스텀 Failure는 Failure을 구현 또는 상속해서 만듭니다.",
        "class ${1:use_case_name}Failure implements Failure {",
        "  @override",
        "",
        "  /// 오류에 따라 오류 문구를 다르게 띄울 수 있습니다",
        "  String get message => '오류가 떴습니다'.tr;",
        "",
        "  @override",
        "",
        "  /// 재시도 버튼을 눌러 다시 기능을 시도할 수 있도록 하고 싶다면 true로 설정해야 합니다.",
        "  bool get isRetryable => false;",
        "}",
        ""
      ],
      "description": "GraphQL 통신 오류 대응용 유즈케이스 순희펫입니다"
    }
  }